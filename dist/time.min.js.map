{"version":3,"sources":["time.js"],"names":["dayNumber","indexOf","minutes","seconds","day","week","hours","secondsAmount","time","length","hoursAmount","toString","minutesAmount","zero_first_format","currentDate","monday","my_getWeekDay","saturday","sunday","tuesday","wednesday","thursday","friday","date","value","current_datetime","Date","timeToSeconds","getHours","getSeconds","getWeekDay","getDay","currentTimeTest","s"],"mappings":"aAMI,SAAIA,cAAiBC,EAALC,EAEhBC,EAAAC,GAGA,OAGJ,GARoBC,KAAKJ,QAAQG,GAQjC,KAAA,KAAAE,EAAA,GAAAJ,EAAAC,EAKI,SAAII,cAAiBC,EAAOC,GAG5B,IAAIA,KAAkBD,EAAA,GAAA,KAAA,GAAA,MAAA,MAAAA,EAAA,GAAA,MACdE,KAAkBF,EAAA,KAAA,IAClBD,KAAqBI,EAAd,KAAA,IAGX,MAAOD,QAAPD,EAGJ,GAAAC,EANeE,EAAcD,WAAa,IAAME,kBAAkBN,GAAeI,WAQtEC,EAAcD,WAAa,IAAME,kBAAkBN,GAAeI,WAAzE,IAAAE,kBAAAN,GAAAI,WADU,SAAVF,EAOCK,EAAkBH,WAAA,IAAAE,kBAAAN,GAAAI,gBAPvB,EAaA,SAAOX,YAAYK,GAGvB,SAAAG,EAAA,GAAA,MAAA,EAEI,SAAIH,aAAgBU,GACpB,OAAOV,UAAPA,KAAAJ,QAAAG,GAIJ,SAASY,WAAAA,GAEL,MADYC,CAAAA,OAAUC,OAAQH,QAAQI,UAASC,SAAWC,OAAUC,UACxDC,GAIhB,SAASV,cAAAA,GAEDW,MADQ,CAAZP,SAAgBC,OAAAH,OAAAI,QAAAC,UAAAC,SAAAC,QACNC,GAGb,SAEDV,kBAAAW,GAGI,OATIA,EAAQ,KACRA,EAAM,IAAIA,GAQdA,EAIA,SAAIrB,cAMJ,IAAAsB,EAAA,IAAAC,KAEA,OAAOC,cAVKF,EAAiBG,WAUtBD,EAAqBzB,aAGhCuB,EAAAI,aACAC,WAAAL,EAAAM,WAAA,IAGaC,gBAAT,WAEI,OADAC,GAAK,IACM,QAJXA,EAAIN,cAAc,EAAG,EAAG,EAAGZ","file":"time.min.js","sourcesContent":["// All functons working with getting, converting currrent time and date\r\n\r\n\r\n\r\n// Convert time to seconds (from 8:01:01 to 28861)\r\nfunction timeToSeconds(hours, minutes, seconds, day) {\r\n    var dayNumber = week.indexOf(day);\r\n\r\n    // Converting time\r\n    let time = dayNumber * 24 * 3600 + hours * 3600 + minutes * 60 + seconds;\r\n    \r\n    return time;\r\n}\r\n\r\n// Convert time to usual format (from 28861 to 8:01:01) in two different lengths\r\nfunction secondsToTime(time, length) {\r\n\r\n    var hoursAmount = ~~(((time / 24) % 3600 * 24) / 3600) + (~~(time / 24 / 3600) * 24);\r\n    var minutesAmount = ~~((time % 3600) / 60);\r\n    var secondsAmount = ~~((time % 3600) % 60);\r\n\r\n    // Long format hours:minutes:seconds\r\n    if (length == 'long') {\r\n        if (hoursAmount == 0) {\r\n            return minutesAmount.toString() + ':' + zero_first_format(secondsAmount).toString();\r\n        }\r\n\r\n        return hoursAmount.toString() + ':' + zero_first_format(minutesAmount).toString() + ':' + zero_first_format(secondsAmount).toString();\r\n    }\r\n\r\n    // Long format minutes:seconds\r\n    if (length == 'short') {\r\n        return minutesAmount.toString() + ':' + zero_first_format(secondsAmount).toString();\r\n    }\r\n}\r\n\r\n\r\n// Getting dayNumber from time\r\nfunction currentDate(time) {\r\n    return (~~(time / 24 / 3600)) % 7;\r\n}\r\n\r\n// Replacing day object to day number (saturday -> '0')\r\nfunction getDayNumber(day) {\r\n    return dayNumber = week.indexOf(day);\r\n}\r\n\r\n// Replacing day number to day object ('0' -> saturday[obj]) (from current_datetime). Usual system, where sunday is the first day and saturday the last day of the week\r\nfunction getWeekDay(date) {\r\n    var week = [sunday, monday, tuesday, wednesday, thursday, friday, saturday];\r\n    return week[date];\r\n}\r\n\r\n// Replacing day number to day object ('0' -> saturday[obj]) (from seconds). My own system, where saturday is start of the week, and friday the end\r\nfunction my_getWeekDay(date) {\r\n    var week = [saturday, sunday, monday, tuesday, wednesday, thursday, friday];\r\n    return week[date];\r\n}\r\n\r\n// Changing '1' -> '01'\r\nfunction zero_first_format(value) {\r\n    if (value < 10) {\r\n        value='0'+value;\r\n    }\r\n    return value;\r\n}\r\n\r\n// Getting current time from device\r\nfunction currentTime() {\r\n\r\n    // Current time declaration\r\n    var current_datetime = new Date();\r\n    var hours = current_datetime.getHours();\r\n    var minutes = current_datetime.getMinutes();\r\n    var seconds = current_datetime.getSeconds();\r\n\r\n    // Comment for tests\r\n    var day = getWeekDay(current_datetime.getDay());\r\n\r\n    // Uncomment for tests\r\n    // return currentTimeTest();  \r\n\r\n    return timeToSeconds(hours, minutes, seconds, day);\r\n}\r\n\r\n// Seconds counter for tests \r\n{\r\n    var s = timeToSeconds(0, 0, 0, monday);\r\n    \r\n    function currentTimeTest() {\r\n        s += 20;\r\n        return s % 604800;\r\n    }\r\n}"]}
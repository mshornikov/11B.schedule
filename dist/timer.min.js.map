{"version":3,"sources":["timer.js"],"names":["whatLessonNow","time","day","saturday","currentDate","sunday","lesson","get_startTime","get_lessons","i","get_time","get_endTime","length","currentStatus","status","call","get_name","nextLesson","estTime","dayNumber","my_getWeekDay","week","maxBreakLength","weel","friday","get_lessonAmount","next_lesson","type","secondsToTime","est","timeToSeconds","document","getElementById","innerHTML","setInterval","currentTime"],"mappings":"aAOI,SAAAA,cAAAC,GAIA,IAAIC,EAAOC,cAAcC,YAAYH,IAArC,GAAIC,GAAOC,SAAWD,GAAOG,OACzB,MAAO,UAQP,IAAIJ,KAAIC,EAAII,cAAOC,CAElB,IAAAD,EAAAJ,EAAAM,cAAAC,GAFD,GAAIR,GAAQK,EAAOC,gBAAgBG,WAAaT,GAAQK,EAAOK,cAAcD,WACzE,OAAOJ,EAKf,OAAIL,GAAQC,EAAIM,cAAcN,EAAIM,cAAcI,OAAS,GAAGD,cAAcD,WAKtE,QAAAT,EAAO,GAAKC,EAAIM,cAAc,GAAGD,gBAAgBG,WAK9C,SAIFG,QAKJ,SAEDA,cAAAC,EAAAb,GACA,MAAuB,mBAAnBa,SAAUC,KAAAD,GACH,WAAAA,EAAAE,WAA+BC,IAAWhB,QAAMe,SAAaf,GAI1D,SAAVa,EACO,6BAAAG,WAAyCA,GAAWhB,WAAMe,aAAaE,QAAgBA,QAAQjB,GAI5F,UAAVa,EACO,uCAA2CI,WAAQjB,GAASA,WAAnE,cAAAiB,QAAA,SAAAjB,GAIU,SAAVa,EACO,oCAA8CI,QAAD,QAApDjB,GADU,WAAVa,EAMCG,+BAAiBC,QAAA,SAAAjB,QANtB,EAcI,SAAAgB,WAAYE,GANhB,IAAIjB,EAAMkB,cAAchB,YAAYH,IAUhCkB,EAAYA,aAAeX,GAL/B,GAAIN,GAAOC,SASPF,OAAQC,KAAIM,EAAcN,GAAGM,cAAH,GAItB,GAAAN,GAAOmB,OACV,OAAAA,KAAAF,EAAA,GAAAX,cAAA,GALL,GAAIP,GAAQC,EAAIM,cAAcN,EAAIM,cAAcI,OAAS,GAAGD,cAAcD,WAWtE,OAAOR,GAAIM,OAGfa,KAAA,GAAAb,cAAA,GARWa,KAAKF,EAAY,GAAGX,cAAc,GAYzC,GAAIc,GAAAA,EAAAA,cAAuB,GAAAf,gBAAAG,WAP3B,OAAOR,EAAIM,cAAc,GAajB,IAAA,IAAAC,EAAOc,EAAId,EAAID,EAAAA,cAAfI,OAAAH,IAAA,CAPR,IAAIH,EAASJ,EAAIM,cAAcC,GAG/B,GAAIR,GAAQK,EAAOC,gBAAgBG,WAAaT,GAAQK,EAAOK,cAAcD,WAU5E,OAAAR,GAAAsB,OAAAlB,GAAAJ,EAAAM,YAAAN,EAAAuB,mBAAA,GAGLF,KAAA,GAAAf,cAAA,GAPeN,EAAIM,cAAcC,EAAE,GAWvC,GAAAR,EAXmB,MAWnBK,EAAAC,gBAAAG,WAGA,IAAAgB,EAAApB,EANI,OAAOoB,EAsBX,IAAAzB,KAASiB,cAAT,SAASA,QAAQS,EAAM1B,GAiBnB,IAAI0B,EAAQP,cAAUhB,YAAAH,IAElB,GAAO2B,SAAPD,EAAqBE,CAGzB,IAAAA,EAAAZ,WAAAhB,GAAAM,gBAAAG,WAfI,OAAOkB,cAAcC,EAAM5B,EAAM,SAIrC,GAAY,UAAR0B,EAAkB,CAcdzB,IAAG2B,EAAIL,cAAQvB,GAAAU,cAAAD,WACf,OAAOkB,cAAcC,EAAMC,EAAAA,SAGlC,GAAA,UAAAH,EAAA,CACJ,IAAAE,EAAAZ,WAAAhB,GAAAM,gBAAAG,WAXO,OAAOkB,cAAcC,EAAM5B,EAAM,QAIrC,GAAY,SAAR0B,EAAiB,CACjB,IAAIE,EAAMZ,WAAWhB,GAAMM,gBAAgBG,WAC3C,OAAIR,GAAOsB,OACAI,cAAcC,EAAMC,cAAc,GAAI,EAAG,EAAGN,QAAUvB,EAAM,QAEhE2B,cAAcC,EAAM5B,EAAM,SA1BrC8B,SAAOC,eAAGZ,kBAAyBa,UAASpB,cAAAb,cAAAC,MAAAA,MAIxCiC,YAAO,WAbX,IAAIjC,EAAOkC,cAkBXJ,SAAQC,eAAc,kBAAAC,UAAApB,cAAAb,cAAAC,GAAAA,IAdvB","file":"timer.min.js","sourcesContent":["// Tracking current lesson and next lesson. And giving it to the page. Counting estimated time ti the next lesson\r\n\r\n    \r\n\r\n// Getting current lesson (object)\r\nfunction whatLessonNow(time) {\r\n\r\n    // Getting current time and day (in object)\r\n    var day = my_getWeekDay(currentDate(time));\r\n\r\n    // Weekend case\r\n    if (day == saturday | day == sunday) {\r\n        return 'weekend';\r\n    }\r\n\r\n    // Loop that running at lessons array and getting current lesson\r\n    for (i in day.get_lessons()){\r\n\r\n        let lesson = day.get_lessons()[i];\r\n\r\n        if (time >= lesson.get_startTime().get_time() & time <= lesson.get_endTime().get_time()) {\r\n            return lesson;\r\n        }\r\n    }\r\n\r\n    // Time after lessons ('15:00') case\r\n    if (time >= day.get_lessons()[day.get_lessons().length - 1].get_endTime().get_time() ) {\r\n        return 'after';\r\n    }\r\n\r\n    // Time before lessons ('8:14') case\r\n    if (time + 1 <= day.get_lessons()[0].get_startTime().get_time()) {\r\n        return 'before';\r\n    }\r\n\r\n    // Break case\r\n    return 'break';\r\n}\r\n\r\n// Creating output from current status\r\nfunction currentStatus(status, time) {\r\n\r\n    // lesson\r\n    if (toString.call(status) == '[object Object]') {\r\n        return 'Сейчас: ' + status.get_name() + ' ' + estTime('lesson', time);\r\n    }\r\n\r\n    // break\r\n    if (status == 'break') {\r\n        return 'Перемена. Cледующий урок: ' + nextLesson(time).get_name() + ' До урока ' + estTime('break', time);\r\n    }\r\n\r\n    // time before lessons\r\n    if (status == 'before') {\r\n        return 'Уроки ещё не начались. Первый урок: ' + nextLesson(time).get_name() + ' До урока: ' + estTime('before', time);\r\n    }\r\n\r\n    // time after lessons\r\n    if (status == 'after') {\r\n        return 'Уроки уже закончились' + ' До уроков: ' + estTime('after', time);\r\n    }\r\n\r\n    // weekend\r\n    if (status == 'weekend') {\r\n        return 'Сегодня выходной' + ' До уроков: ' + estTime('before', time);\r\n    }\r\n}\r\n\r\n// Function which understand which lesson is the next\r\nfunction nextLesson(time) {\r\n\r\n    var day = my_getWeekDay(currentDate(time));\r\n\r\n    let dayNumber = getDayNumber(day);\r\n\r\n    // Weekend\r\n    if (day == saturday) {\r\n        return week[dayNumber + 2].get_lessons()[0];\r\n    }\r\n\r\n    if (day == sunday) {\r\n        return week[dayNumber + 1].get_lessons()[0];\r\n    }\r\n\r\n    // Time after lessons ('15:00') at the end of the day\r\n    if (time >= day.get_lessons()[day.get_lessons().length - 1].get_endTime().get_time() ) {\r\n\r\n        // exclusion for friday (next lesson is the first lesson at monday)\r\n        if (day == friday) {\r\n            return week[2].get_lessons()[0];\r\n        }\r\n        return week[dayNumber + 1].get_lessons()[0];\r\n    }\r\n\r\n    // Time before lessons ('8:14') at the start of the day\r\n    if (time <= day.get_lessons()[0].get_startTime().get_time()) {\r\n        return day.get_lessons()[0];\r\n    }\r\n\r\n    // Loop that running at lessons array and getting next lesson\r\n    for (let i = 0;  i < day.get_lessons().length; i++){\r\n        \r\n        var lesson = day.get_lessons()[i];\r\n        var maxBreakLength = 1200; // in seconds\r\n\r\n        if (time >= lesson.get_startTime().get_time() & time <= lesson.get_endTime().get_time()) {\r\n\r\n            // exclusion for last lesson at friday\r\n            if (day == friday & lesson == day.get_lessons(day.get_lessonAmount() - 1)) {\r\n                return weel[0].get_lessons()[0];\r\n            }\r\n            return day.get_lessons()[i+1];\r\n        }\r\n        if (time + maxBreakLength >= lesson.get_startTime().get_time()) {\r\n            var next_lesson = lesson;\r\n        }\r\n    }\r\n    \r\n    // Break\r\n    return next_lesson;\r\n}\r\n\r\n// Updating status in header\r\n\r\n\r\n// For fast download of web page\r\nlet time = currentTime();\r\ndocument.getElementById('current_status').innerHTML = currentStatus(whatLessonNow(time), time);\r\n\r\n\r\n// timer for every second update\r\nsetInterval(function () {\r\n\r\n    // Getting current time\r\n    let time = currentTime();\r\n\r\n    document.getElementById('current_status').innerHTML = currentStatus(whatLessonNow(time), time);\r\n\r\n}, 1000);\r\n\r\n// Counting estimated time to the next lesson\r\nfunction estTime(type, time) {\r\n\r\n    var day = my_getWeekDay(currentDate(time)); // getting current day for friday check\r\n\r\n    // estimated time to break end\r\n    if (type == 'break') {\r\n        let est = nextLesson(time).get_startTime().get_time();\r\n        return secondsToTime(est - time, 'short');\r\n    }\r\n\r\n    // estimated time to lesson end\r\n    if (type == 'lesson') {\r\n        let est = whatLessonNow(time).get_endTime().get_time();\r\n        return secondsToTime(est - time, 'short');\r\n    }\r\n\r\n    // estimated time to the start of first lesson today\r\n    if (type == 'before') {\r\n        let est = nextLesson(time).get_startTime().get_time();\r\n        return secondsToTime(est - time, 'long');\r\n    }\r\n\r\n    // estimated time to the start of first lesson tomorrow\r\n    if (type == 'after') {\r\n        let est = nextLesson(time).get_startTime().get_time();\r\n        if (day == friday) {\r\n            return secondsToTime(est + timeToSeconds(24, 0, 0, friday) - time, 'long');\r\n        }\r\n        return secondsToTime(est - time, 'long');\r\n    }\r\n}   "]}